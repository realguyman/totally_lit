plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url 'https://maven.terraformersmc.com/' }
    maven { url 'https://maven.wispforest.io/' }
    maven { url 'https://jitpack.io/' }
    maven { url 'https://maven.blamejared.com/' }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url 'https://maven.shedaniel.me/' }
}

dependencies {
    // Required dependencies
    minecraft "com.mojang:minecraft:${project.minecraft}"
    mappings "net.fabricmc:yarn:${project.mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api}"
    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_lib}")

    // Local dependencies
    modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu}"
    modLocalRuntime "maven.modrinth:lithium:${project.lithium}"
//    modLocalRuntime "vazkii.patchouli:Patchouli:${project.patchouli}"
//    modLocalRuntime "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei}"
//    modLocalRuntime "dev.emi:emi:${project.emi}"
}

fabricApi {
    configureDataGeneration()
}

loom {
    splitEnvironmentSourceSets()

    mods {
        'totally_lit' {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runs {
        gametest {
            inherit server
            name 'Gametest'
            vmArg '-Dfabric-api.gametest'
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir 'build/gametest'
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from('LICENSE') {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

modrinth {
    if (project.version.contains('alpha')) {
        versionType = 'alpha'
    } else if (project.version.contains('beta')) {
        versionType = 'beta'
    }

    token = System.getenv('MODRINTH_TOKEN')
    projectId = 'hbKDMT6l'
    uploadFile = remapJar
    additionalFiles = [remapSourcesJar, javadocJar]
    loaders = ['fabric', 'quilt']
    syncBodyFrom = rootProject.file('README.md').text
    dependencies {
        required.project 'fabric-api'
        required.project 'owo-lib'
        optional.project 'modmenu'
        incompatible.project 'hardcore-torches'
    }
}

publishing {
    publications {
        create('mavenJava', MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}
